{"componentChunkName":"component---src-templates-docs-js","path":"/programming-cookbook/git/git-subrepo","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsRepo":"dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true,"contentRootPath":"content","siteUrl":"https://www.dotnetthailand.com"}},"mdx":{"fields":{"id":"05a7d3df-f524-5e5c-8bad-2548ca4ef091","title":"git-subrepo","slug":"/programming-cookbook/git/git-subrepo"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"git-subrepo\",\n  \"showMetadata\": true,\n  \"editable\": true,\n  \"showToc\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Use git subrepo to manage a custom Orchard Core CMS module\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I use git subrepo to manage my Orchard Core CMS custom modules.  Here are what I did:\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a repository for an individual custom module.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pull required custom modules to the main project.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Continue working on the main project.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Push all changes to an individual modules' repositories.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We can pull an update version of each module that used by other projects.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Let's started by following the steps below.\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Create a new repository for a custom module\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Go to \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/\"\n  }, \"GitHub\"), \" and create a new GitHub repository for your custom Orchard Core CMS module.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create an empty project\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Select public project for an open source project or private if not.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Select Initialize with README file.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Select Visual Studio git ignore.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Select MIT License for an open source project.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a new \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"develop\"), \" branch from GitHub UI in branch drop down.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Change \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"develop\"), \" branch as a default branch.\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Install git-subrepo\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Follow \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ingydotnet/git-subrepo#installation\"\n  }, \"this document\"), \" to install git-subrepo.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Execute \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git subrepo --version\"), \" to verify if you have successfully installed git-subrepo.\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Clone a custom module to the main project\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Assume that we have setup Orchard Core CMS project. You can follow \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/web-frameworks/orchard-core-cms/setup-orchard-core-cms\"\n  }, \"this document\"), \" to setup a new Orchard Core CMS project.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Your Orchard Core CMS project should look like this:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"  tree -I \\\"bin|obj\\\" orchard-example\\n  orchard-example\\n  \\u251C\\u2500\\u2500 nuget.config\\n  \\u2514\\u2500\\u2500 src\\n      \\u2514\\u2500\\u2500 Orchard.Web\\n          \\u251C\\u2500\\u2500 NLog.config\\n          \\u251C\\u2500\\u2500 Orchard.Web.csproj\\n          \\u251C\\u2500\\u2500 Program.cs\\n          \\u251C\\u2500\\u2500 Properties\\n          \\u2502   \\u2514\\u2500\\u2500 launchSettings.json\\n          \\u251C\\u2500\\u2500 Startup.cs\\n          \\u251C\\u2500\\u2500 appsettings.json\\n          \\u2514\\u2500\\u2500 wwwroot\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Before cloning a module project with git-subrepo, please make sure your main project is under git repository and you have committed all changes.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CD to the root of your Orchard Core CMS project and run the following command:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"  git subrepo clone <your-custom-module-remote-url> <your-custom-module-path>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Please note that the tool does not create another subdirectory with the name of the subrepo that you are adding.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example command to clone \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Codesanook.OrganizationProfile\"), \" to the main project.\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"  git subrepo clone git@github.com:codesanook/Codesanook.OrganizationProfile.git src/Modules/Codesanook.OrganizationProfile\\n\"))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Generate code for a custom module\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If we clone an empty project, we need to generate some code from a template.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Follow \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/web-frameworks/orchard-core-cms/create-a-custom-orchard-core-cms-module#createthemoduleprojectfromatemplate\"\n  }, \"this document\"), \" to generate code for a custom module from a template.\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Your current project's file structure\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"After cloning a custom project's repository and generate some code if needed, your project files' structure should look like this:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"  tree -Ia \\\"bin|obj|Localization\\\" orchard-example\\n  orchard-example\\n  \\u2514\\u2500\\u2500 src\\n      \\u251C\\u2500\\u2500 Modules\\n      \\u2502\\xA0\\xA0 \\u2514\\u2500\\u2500 Codesanook.OrganizationProfile\\n      \\u2502       \\u2514\\u2500\\u2500 .gitrepo\\n      \\u2514\\u2500\\u2500 Orchard.Web\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Some file/folder have been omit for simplicity.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"git-repo creates \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".gitrepo\"), \" file for storing some subrepo essential information. We don't edit this file direct but we manage our project with git-subrepo commands instead.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If you run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"git log\"), \", you will find a new commit with the similar content as the following:\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"  git log\\n  Date:   Tue Mar 22 16:31:26 2022 +0700\\n\\n      git subrepo clone git@github.com:codesanook/Codesanook.OrganizationProfile.git src/Modules/Codesanook.OrganizationProfile\\n\\n      subrepo:\\n        subdir:   \\\"src/Modules/Codesanook.OrganizationProfile\\\"\\n        merged:   \\\"6e44051\\\"\\n      upstream:\\n        origin:   \\\"git@github.com:codesanook/Codesanook.OrganizationProfile.git\\\"\\n        branch:   \\\"develop\\\"\\n        commit:   \\\"6e44051\\\"\\n      git-subrepo:\\n        version:  \\\"0.4.3\\\"\\n        origin:   \\\"https://github.com/ingydotnet/git-subrepo\\\"\\n        commit:   \\\"2f68596\\\"\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Continue your work\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can now continue your work commit and push changes to your main project repository as usual without special command.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"It is good to make a separated commit for changes in your custom module.\")))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Push changes to a custom module's repository\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Execute the following command to push changes to a custom module's repository:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"  git subrepo push <your-custom-module-path>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example code to push changes in Codesanook.OrganizationProfile back to its repository:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"  git subrepo push src/Modules/Codesanook.OrganizationProfile\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can also specify a branch name when using a push command.\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Update the latest version of a custom module\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"On another project, if you want to update the latest version of a custom module, just execute the following command:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"  git subrepo pull <your-custom-module-path>\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Example code to pull changes in Codesanook.OrganizationProfile to the main project:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"  git subrepo pull src/Modules/Codesanook.OrganizationProfile\\n\"))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Other consideration to distribute your custom module.\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can also make your open source custom module as Nuget package and let other projects consume your Nuget package instead of cloning it by git-subrepo.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This is good if a consumer doesn't make any changes to your custom module.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You may learn how to publish a Nuget package from \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=WW3bO1lNDmo&list=PLdo4fOcmZ0oVLvfkFk8O9h6v2Dcdh2bh_\"\n  }, \"these videos\"), \".\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Useful links and credit\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ingydotnet/git-subrepo/\"\n  }, \"git-subrepo's repository\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://blog.s-schoener.com/2019-04-20-git-subrepo/\"\n  }, \"git-subrepo tutorial\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/ingydotnet/git-subrepo/wiki/Basics\"\n  }, \"git-subrepo basic guide\")))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#use-git-subrepo-to-manage-a-custom-orchard-core-cms-module","title":"Use git subrepo to manage a custom Orchard Core CMS module","items":[{"url":"#create-a-new-repository-for-a-custom-module","title":"Create a new repository for a custom module"},{"url":"#install-git-subrepo","title":"Install git-subrepo"},{"url":"#clone-a-custom-module-to-the-main-project","title":"Clone a custom module to the main project"},{"url":"#generate-code-for-a-custom-module","title":"Generate code for a custom module"},{"url":"#your-current-projects-file-structure","title":"Your current project's file structure"},{"url":"#continue-your-work","title":"Continue your work"},{"url":"#push-changes-to-a-custom-modules-repository","title":"Push changes to a custom module's repository"},{"url":"#update-the-latest-version-of-a-custom-module","title":"Update the latest version of a custom module"},{"url":"#other-consideration-to-distribute-your-custom-module","title":"Other consideration to distribute your custom module."}]},{"url":"#useful-links-and-credit","title":"Useful links and credit"}]},"timeToRead":2,"parent":{"__typename":"File","relativePath":"programming-cookbook/git/git-subrepo.md"},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":true}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"c5b84bde856cada50ebbc2f8839e18042c765a83","date":"2022-04-17 07:38"}},"pageContext":{"id":"05a7d3df-f524-5e5c-8bad-2548ca4ef091"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}