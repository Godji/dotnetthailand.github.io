{"componentChunkName":"component---src-templates-docs-js","path":"/web-frameworks/asp-net-core/asp-net-core-minimal-apis","result":{"data":{"site":{"siteMetadata":{"title":".NET Thailand","docsLocation":"https://github.com/dotnetthailand/dotnetthailand.github.io","docsRepo":"dotnetthailand/dotnetthailand.github.io","docsLocationType":"github","editable":true,"contentRootPath":"content","siteUrl":"https://www.dotnetthailand.com"}},"mdx":{"fields":{"id":"2788a651-ca70-5162-8020-036d265ccc30","title":"ASP.NET Core minimal APIs","slug":"/web-frameworks/asp-net-core/asp-net-core-minimal-apis"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"ASP.NET Core minimal APIs\",\n  \"showMetadata\": true,\n  \"editable\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"A single file ASP.NET Core minimal APIs\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Install .NET on WSL2 Ubuntu\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Follow \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/programming-cookbook/wsl-powershell-useful-scripts/install-dotnet\"\n  }, \"this instruction\"), \" to install .NET on WSL2.\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Create todo app API project\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Create a new ASP.NET Core minimal APIs project\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a new project from a template with the following command:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"  dotnet new web -o MinimalApi\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This will create a new ASP.NET Core minimal API inside a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MinimalApi\"), \" folder.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"CD to a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"MinimalApi\"), \" folder and open it with VS Code by executing \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"code .\"), \".\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"  cd MinimalApi\\n  code .\\n\"))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Current project structure\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Optionally, you can check project file structure with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"tree\"), \" command.\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"  tree MinimalApi -I 'bin|obj'\\n  MinimalApi\\n  \\u251C\\u2500\\u2500 MinimalAPI.csproj\\n  \\u251C\\u2500\\u2500 Program.cs\\n  \\u251C\\u2500\\u2500 Properties\\n  \\u2502\\xA0\\xA0 \\u2514\\u2500\\u2500 launchSettings.json\\n  \\u251C\\u2500\\u2500 appsettings.Development.json\\n  \\u2514\\u2500\\u2500 appsettings.json\\n\"))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Run the project\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Program.cs\"), \" with VS Code and edit it to pass \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"http://localhost:3000\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"app.Run\"), \" method.\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cs\"\n  }, \"// Program.cs\\n// ...\\n    app.Run(\\\"http://localhost:3000\\\");\\n// ...\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open a VS Code's integrated terminal and run:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"  dotnet run\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Open a browser and navigate to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"http://localhost:3000\"), \", you should see \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Hello World!\"), \" message on a home page.\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Install packages for using EF Core ORM\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In an integrated terminal, run the following commands:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"  dotnet add package Microsoft.EntityFrameworkCore --version 6.0.4\\n  dotnet add package Microsoft.EntityFrameworkCore.InMemory --version 6.0.4\\n\"))))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Create a single file todo app API\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Replace contents of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Program.cs\"), \" with the following source code:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cs\"\n  }, \"  // Program.cs\\n  using Microsoft.EntityFrameworkCore;\\n\\n  // Create a builder.\\n  var builder = WebApplication.CreateBuilder(args);\\n\\n  // Configure EF to use in-memory database, for testing purpose only.\\n  builder.Services.AddDbContext<TodoDbContext>(\\n      options => options.UseInMemoryDatabase(\\\"TodoItems\\\")\\n  );\\n\\n  // Create a new web app.\\n  using var app = builder.Build();\\n  if (app.Environment.IsDevelopment())\\n  {\\n      app.UseDeveloperExceptionPage();\\n  }\\n\\n  // https://docs.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis?view=aspnetcore-6.0#responses\\n  app.MapGet(\\\"/\\\", (Func<string>)(() => \\\"Hello World!\\\"));\\n\\n  app.MapGet(\\\"/todos\\\", async (HttpContext http, TodoDbContext todoContext) =>\\n  {\\n      var todos = await todoContext.TodoItems.ToListAsync();\\n      return todos;\\n  });\\n\\n  app.MapGet(\\\"/todos/{id}\\\", async (HttpContext http, TodoDbContext todoContext, int? id) =>\\n  {\\n      if (!id.HasValue)\\n      {\\n          return Results.BadRequest();\\n      }\\n\\n      var todo = await todoContext.TodoItems.FindAsync(id);\\n      if (todo == null)\\n      {\\n          return Results.NotFound();\\n      }\\n\\n      return Results.Ok(todo);\\n  });\\n\\n  app.MapPost(\\\"/todos\\\", async (HttpContext http, TodoDbContext dbContext, TodoItem todo) =>\\n  {\\n      dbContext.TodoItems.Add(todo);\\n      await dbContext.SaveChangesAsync();\\n      http.Response.StatusCode = 201; // Created\\n  });\\n\\n  app.MapPut(\\\"/todos/{id}\\\", async (HttpContext http, TodoDbContext dbContext, TodoItem changedTodo, int? id) =>\\n  {\\n      if (!id.HasValue)\\n      {\\n          return Results.BadRequest();\\n      }\\n\\n      var exisingTodo = await dbContext.TodoItems.FindAsync(id);\\n      if (exisingTodo == null)\\n      {\\n          return Results.NotFound();\\n      }\\n\\n      exisingTodo.Title = changedTodo.Title;\\n      exisingTodo.IsCompleted = changedTodo.IsCompleted;\\n      await dbContext.SaveChangesAsync();\\n\\n      return Results.NoContent();\\n  });\\n\\n  app.MapDelete(\\\"/todos/{id}\\\", async (HttpContext http, TodoDbContext dbContext, int? id) =>\\n  {\\n      if (!id.HasValue)\\n      {\\n          return Results.BadRequest();\\n      }\\n\\n      var todo = await dbContext.TodoItems.FindAsync(id);\\n      if (todo == null)\\n      {\\n          return Results.NotFound();\\n      }\\n\\n      dbContext.TodoItems.Remove(todo);\\n      await dbContext.SaveChangesAsync();\\n      return Results.NoContent();\\n  });\\n\\n  app.Run(\\\"http://localhost:3000\\\");\\n\\n  // Define TodoItem model\\n  class TodoItem\\n  {\\n      public int Id { get; set; }\\n      public string Title { get; set; }\\n      public bool IsCompleted { get; set; }\\n      public TodoItem(string title) => Title = title;\\n  }\\n\\n  // Define TodoDbContext\\n  class TodoDbContext : DbContext\\n  {\\n      public TodoDbContext(DbContextOptions options) : base(options) { }\\n      public DbSet<TodoItem> TodoItems => Set<TodoItem>();\\n  }\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Save the file.\")))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Run todo app API\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In an integrated terminal, run the following command. (Kill the running process if needed.):\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"  dotnet run\\n\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can now test APIs with any client tools, e.g. Postman.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All available APIs:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use http://localhost:3000/todos with HTTP \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"GET\"), \" to get all existing todo items.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use http://localhost:3000/todos/{id} with HTTP \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"GET\"), \" to get an existing todo item.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use http://localhost:3000/todos with HTTP \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"POST\"), \" to add a new todo item.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use http://localhost:3000/todos/{id} with HTTP \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"PUT\"), \" to update an existing todo item.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use http://localhost:3000/todos/{id} with HTTP \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"DELETE\"), \" to delete an existing todo item.\"))))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Useful information and credit\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Jose Barbosa for his amazing repository \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/kidchenko/dot-net-min-api\"\n  }, \"https://github.com/kidchenko/dot-net-min-api\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/dotnet/core/blob/main/release-notes/6.0/install-linux.md\"\n  }, \".NET 6 installation instructions for Linux from .NET repository\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pre-installed Snapd distributions \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://snapcraft.io/docs/installing-snapd#heading--pre-installed\"\n  }, \"https://snapcraft.io/docs/installing-snapd#heading--pre-installed\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ubuntu-wsl2-systemd-script \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/DamionGans/ubuntu-wsl2-systemd-script\"\n  }, \"https://github.com/DamionGans/ubuntu-wsl2-systemd-script\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unmask Snapd \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://askubuntu.com/a/1258139\"\n  }, \"https://askubuntu.com/a/1258139\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-4/\"\n  }, \"ASP.NET Core updates in .NET 6 Preview 4\")))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#a-single-file-aspnet-core-minimal-apis","title":"A single file ASP.NET Core minimal APIs"},{"url":"#install-net-on-wsl2-ubuntu","title":"Install .NET on WSL2 Ubuntu"},{"url":"#create-todo-app-api-project","title":"Create todo app API project","items":[{"url":"#create-a-new-aspnet-core-minimal-apis-project","title":"Create a new ASP.NET Core minimal APIs project"},{"url":"#current-project-structure","title":"Current project structure"},{"url":"#run-the-project","title":"Run the project"},{"url":"#install-packages-for-using-ef-core-orm","title":"Install packages for using EF Core ORM"},{"url":"#create-a-single-file-todo-app-api","title":"Create a single file todo app API"},{"url":"#run-todo-app-api","title":"Run todo app API"}]},{"url":"#useful-information-and-credit","title":"Useful information and credit"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"web-frameworks/asp-net-core/asp-net-core-minimal-apis.md"},"frontmatter":{"metaTitle":null,"showMetadata":true,"editable":true,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"main"},"gitCommit":{"hash":"c5b84bde856cada50ebbc2f8839e18042c765a83","date":"2022-04-17 07:38"}},"pageContext":{"id":"2788a651-ca70-5162-8020-036d265ccc30"}},"staticQueryHashes":["12478684","12478684","1306071104","2353585426","2353585426","2552263575","2552263575","2882937274","2882937274","353167761","353167761","3812332637","3812332637","4285724809"]}